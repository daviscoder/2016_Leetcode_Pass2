// 这个解法无需数组排序，有overlap就grow newInterval，没有overlap直接push
// pushed表示newInterval是否已经被push过，仅在排序intervals里面有用. 因为不排序可以直接把new Interval塞到最后

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        if (intervals.size() == 0)
            return vector<Interval> (1, newInterval);
        vector<Interval> res;
        bool pushed = false;
        for (int i = 0; i < intervals.size(); i++) {
            if (intervals[i].end < newInterval.start) {
                res.push_back (intervals[i]);
            }
            else if (intervals[i].start > newInterval.end) {
                if (pushed == false) {
                    res.push_back (newInterval);
                    pushed = true;
                }
                res.push_back (intervals[i]);
            }
            else {
                newInterval.start = min (newInterval.start, intervals[i].start);
                newInterval.end = max (newInterval.end, intervals[i].end);
            }
        }
        if (pushed == false) {
            res.push_back (newInterval);
        }
        return res;
    }
};
